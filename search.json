[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 MicroWNV authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Bloodmeal.html","id":"biting-distribution-matrix","dir":"Articles","previous_headings":"","what":"Biting distribution matrix","title":"Biting distribution and transmission","text":"MicroWNV bloodmeal function uses generic interfaces human, adult mosquito, adult bird components compute quantities used simulate transmission pathogens species. function (method dispatches) enforces mathematical consistency transmission calculated, regardless specific models used implement component. compute_bloodmeal function implements called vector control functions called update functions update model components time step called. describe calculation works, implemented code. Using generic human interface calculate following values: W: compute_W, gives weighted person time risk spent patch H: compute_H, gives total population strata x: compute_x, gives net infectiousness humans strata wf: compute_wf, gives biting weights strata Psi: compute_Psi, gives time risk matrix Likewise use generic bird interface calculate: WB: compute_WB, gives weighted bird time risk spent patch B_pop: compute_B_pop, gives total bird population patch xB: compute_xB, gives net infectiousness birds patch wfB: compute_wfB, gives bird biting weights patch PsiB: compute_PsiB, gives bird time risk matrix Two biting distribution matrices (mosquitoes humans birds, respectively) calculated: \\[\\begin{equation} \\beta_{H_{n\\times p}} = \\mbox{diag}(w_{f}) \\cdot \\Psi \\cdot \\mbox{diag}(1/W) \\\\ \\beta_{B_{p\\times p}} = \\mbox{diag}(w_{f_{B}}) \\cdot \\Psi_{B} \\cdot \\mbox{diag}(1/W_{B}) \\\\ \\end{equation}\\] values computed compute \\(f\\), blood feeding rate, \\(q\\), proportion blood meals human hosts. use generic interface functions compute_f compute_q, dispatch adult mosquito type. Finally transmission terms component uses independently update time step calculated sent component. EIR (entomological inoculation rate) humans birds, \\(\\kappa\\), net infectiousness blood hosts (humans birds) mosquitoes. \\[\\begin{equation} EIR_{H_{n\\times 1}} = \\beta_{H} \\cdot (fqZ) \\\\ EIR_{B_{p\\times 1}} = \\beta_{B} \\cdot (f(1-q)Z) \\\\ \\kappa_{p\\times 1} = q \\cdot \\beta_{H}^{\\intercal} \\cdot xH + (1 - q) \\cdot \\beta_{B}^{\\intercal} \\cdot x_{B} B_{pop} \\end{equation}\\]","code":""},{"path":"/articles/Bloodmeal.html","id":"force-of-infection","dir":"Articles","previous_headings":"","what":"Force of infection","title":"Biting distribution and transmission","text":"terms computed, models use fairly similar way compute force infection term. mosquito component, given \\(\\kappa fq\\), per-capita rate infection mosquito population. Humans birds compute \\(h = b EIR\\). specific way terms computed state updated using terms may change models, models use can modified take input terms.","code":""},{"path":"/articles/Contributing.html","id":"issues","dir":"Articles","previous_headings":"","what":"Issues","title":"Contributing","text":"find bug, question use feature sufficient documentation, suggestion improvement, please leave issue GitHub repo. bug reports please include: MicroWNV version Operating System R version Steps recreate Expected behaviour Actual behaviour","code":""},{"path":"/articles/Contributing.html","id":"git","dir":"Articles","previous_headings":"","what":"Git","title":"Contributing","text":"use Git project. means use main, dev, feat/*, bug/*, hotfix/* branches. Please refer post information type branch. main: branch always stores last “production” release software, protected branch. pull request submitted main unless dev, meaning software version updated. dev: pull requests users made dev branch. branch protected deletion. feat: new significantly enhanced features made feat branches merged dev. feat/* branch merged dev, can deleted. bug: branches fix bugs, usually raised issue. bug/* branch merged dev, can deleted. hotfix: difference bug/* hotfix/* branch hotfix small quick fixes (misspellings, incorrect arguments, etc.) short-lived. merged dev, can deleted. periodically merge dev master small release updates. releases appear GitHub releases page.","code":""},{"path":"/articles/Contributing.html","id":"pull-requests","dir":"Articles","previous_headings":"","what":"Pull Requests","title":"Contributing","text":"making pull request, please use dev base branch. adding new feature (.e. pull feat/* branch), please ensure added minimal tests using testthat functionality feature can tested.","code":""},{"path":"/articles/Contributing.html","id":"continuous-integration","dir":"Articles","previous_headings":"","what":"Continuous integration","title":"Contributing","text":"use GitHub Actions continuous integration platform run workflows. workflows use r-lib/actions R packages. run three types workflows. R CMD check runs pull request [main, dev] branches. Test coverage runs pull requests [main, dev] uses codecov.io integration checking test coverage. Finally, pkgdown runs pushes main, occur dev merged main periodically. Please note sometimes hard diagnose bugs can due date workflows. find strange unusual bug coming workflow, something consider checking.","code":""},{"path":"/articles/SIRS_birds.html","id":"deterministic-model","dir":"Articles","previous_headings":"","what":"Deterministic model","title":"SIRS bird model","text":"deterministic model following form: \\[\\begin{equation} S_{t+1} = e^{-(\\mu_{t} + h_{t})} S_{t} + (1 - e^{-(\\mu_{t} + \\gamma)}) \\left( \\frac{r}{\\mu_{t} + r} \\right) R_{t} + (\\lambda_{t} \\cdot \\psi) \\\\ I_{t+1} = e^{-(\\mu_{t} + \\gamma)} E_{t} + (1 - e^{-(\\mu_{t} + h_{t})}) \\left( \\frac{h_{t}}{\\mu_{t} + h_{t}} \\right) S_{t} \\\\ R_{t+1} = e^{-(\\mu_{t} + r)} R_{t} + (1 - e^{-(\\mu_{t} + \\gamma)}) \\left( \\frac{\\gamma}{\\mu_{t} + \\gamma} \\right) I_{t} \\\\ \\end{equation}\\] \\(\\psi\\) dispersal matrix new fledglings, \\(\\lambda_{t}\\) number new fledglings reaching adulthood day, calculated fledgling component.","code":""},{"path":"/articles/SIRS_birds.html","id":"stochastic-model","dir":"Articles","previous_headings":"","what":"Stochastic model","title":"SIRS bird model","text":"stochastic model largely deterministic one, except flows compartments sampled appropriate binomial distribution model’s state space integer vectors.","code":""},{"path":"/articles/SIRS_birds.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"SIRS bird model","text":"’ll run simple example , 3 years. need specify \\(\\lambda\\), ’ll choose length 365, giving number fledgling birds reaching adulthood per day, per patch, day year. peak middle year, 10 birds. use mild sinusoidal seasonal signal mortality, average year mean_mu. Please note particularly realistic parameter values birds, merely intended showcase functionality.","code":"tmax <- 365 * 3 p <- 3  gamma <- 1/7 r <- 1/60  lambda <- dnorm(x = 1:365, mean = 180, sd = 90) lambda <- lambda * (5/max(lambda)) lambda <- t(replicate(p, lambda))  seasonal_signal <- sin((1:365)/365*2*pi + 90) + 1 mean_mu <- 1/365  mu <- seasonal_signal * mean_mu mu <- pmax(mu, sqrt(.Machine$double.eps)) # just to avoid numerical issues  fledge_disperse <- matrix(   c(     0.9, 0.05, 0.05,     0.05, 0.9, 0.05,     0.05, 0.05, 0.9   ), nrow = 3, ncol = 3,    byrow = TRUE )  theta <- fledge_disperse  par(mar = c(5,5,2,5)) plot(lambda[1, ], type = \"l\", col = \"red\", xlab = \"Day\", ylab = \"Fledgling births (red)\") par(new = TRUE) plot(mu, type = \"l\", axes = F, xlab = NA, ylab = NA, col = \"blue\") axis(side = 4) mtext(side = 4, line = 3, 'Mortality rate (blue)')"},{"path":"/articles/SIRS_birds.html","id":"deterministic-simulation","dir":"Articles","previous_headings":"Example","what":"Deterministic simulation","title":"SIRS bird model","text":"set daily force infection average \\(5\\%\\) birds become infected day. Let’s first deterministic simulation. use setup_birds_SIRS setup SIRS birds model bird component, setup_fledge_trace set fledgling (immature) component simple trace (forced) model.","code":"SIR <- matrix(data = 0, nrow = p, ncol = 3) SIR[, 1] <- 10  mod <- make_MicroMoB(tmax = tmax, p = 3) setup_birds_SIRS(mod, stochastic = FALSE, fledge_disperse = fledge_disperse, theta = theta, SIR = SIR, mu = mu, gamma = gamma, r = r) setup_fledge_trace(mod, trace = lambda, stochastic = FALSE)  SIR_det <- matrix(data = NaN, nrow = tmax * 3, ncol = 4, dimnames = list(NULL, c(\"Patch\", \"S\", \"I\", \"R\"))) SIR_det[, \"Patch\"] <- rep(1:3, times = tmax)  h <- rep(qexp(p = 0.05), p) mod$bird$EIR <- h / mod$bird$b  # run it while(mod$global$tnow <= tmax) {   step_fledge(model = mod)   step_birds(model = mod)   ix_fill <- which(is.nan(SIR_det[, 2]))[1:3]   SIR_det[ix_fill, 2:4] <- mod$bird$SIR   mod$global$tnow <- mod$global$tnow + 1L }  det_out <- as.data.table(SIR_det) det_out <- melt(det_out, id.vars = \"Patch\", variable.name = \"Compartment\", value.name = \"Count\") det_out[, \"Day\" := 1:.N, by = c(\"Patch\", \"Compartment\")]  ggplot(det_out) +     geom_line(aes(x = Day, y = Count, color = Compartment)) +     facet_grid(Patch ~ .)"},{"path":"/articles/SIRS_birds.html","id":"stochastic-simulation","dir":"Articles","previous_headings":"Example","what":"Stochastic simulation","title":"SIRS bird model","text":"Now run 10 stochastic simulations, using parameters.","code":"sto_out <- mclapply(X = 1:10, FUN = function(runid) {      mod <- make_MicroMoB(tmax = tmax, p = 3)   setup_birds_SIRS(mod, stochastic = TRUE, fledge_disperse = fledge_disperse, theta = theta, SIR = SIR, mu = mu, gamma = gamma, r = r)   setup_fledge_trace(mod, trace = lambda, stochastic = TRUE)      SIR_out <- matrix(data = NaN, nrow = tmax * 3, ncol = 4, dimnames = list(NULL, c(\"Patch\", \"S\", \"I\", \"R\")))   SIR_out[, \"Patch\"] <- rep(1:3, times = tmax)      h <- rep(qexp(p = 0.05), p)   mod$bird$EIR <- h / mod$bird$b      # run it   while(mod$global$tnow <= tmax) {     step_fledge(model = mod)     step_birds(model = mod)     ix_fill <- which(is.nan(SIR_out[, 2]))[1:3]     SIR_out[ix_fill, 2:4] <- mod$bird$SIR     mod$global$tnow <- mod$global$tnow + 1L   }      out <- as.data.table(SIR_out)   out <- melt(out, id.vars = \"Patch\", variable.name = \"Compartment\", value.name = \"Count\")   out[, \"Day\" := 1:.N, by = c(\"Patch\", \"Compartment\")]   out[, \"Run\" := as.integer(runid)]        return(out) })  sto_out <- do.call(rbind, sto_out)  ggplot(sto_out) +     geom_line(aes(x = Day, y = Count, color = Compartment, group = interaction(Run, Compartment)), alpha = 0.35) +     facet_grid(Patch ~ .)"},{"path":"/articles/Simple_example.html","id":"micrownv-simulation","dir":"Articles","previous_headings":"","what":"MicroWNV simulation","title":"Example WNV simulation","text":"Now set model run deterministic simulation. Now draw 10 trajectories stochastic simulation, plot output. plot cloud stochastic trajectories faint lines deterministic solution solid lines. results plotted .","code":"mod <- make_MicroMoB(tmax = tmax, p = patches)  # humans setup_humans_SIR(mod, stochastic = FALSE, theta = theta, H = sum(SIR), SIR = SIR, b = b, c = c, gamma = gamma)  # birds setup_birds_SIRS(mod, stochastic = FALSE, fledge_disperse = theta_B, theta = theta_B, SIR = SIR_B, mu = mu, gamma = gammaB, r = rB) setup_fledge_trace(mod, stochastic = FALSE, trace = fledge_lambda)  # mosquitoes setup_mosquito_RM(mod, stochastic = FALSE, f = f, q = q, eip = eip, p = p, psi = psi, M = M, Y = Y, Z = Z) setup_aqua_trace(mod, stochastic = FALSE, lambda = lambda)  # output det_out <- rbind(   data.table(Day = rep(1:tmax, times = 3), Count = NaN, Compartment = rep(c(\"S\", \"I\", \"R\"), each = tmax), Species = \"Human\"),   data.table(Day = rep(1:tmax, times = 3), Count = NaN, Compartment = rep(c(\"S\", \"I\", \"R\"), each = tmax), Species = \"Bird\"),   data.table(Day = rep(1:tmax, times = 3), Count = NaN, Compartment = rep(c(\"M\", \"Y\", \"Z\"), each = tmax), Species = \"Mosquito\") ) setkeyv(det_out, c(\"Day\", \"Species\"))  # run it while (mod$global$tnow <= tmax) {   # compute biting   MicroWNV::compute_bloodmeal(model = mod)   # update state   step_aqua(model = mod)   step_mosquitoes(model = mod)   step_fledge(model = mod)   step_birds(model = mod)   step_humans(model = mod)   # output   det_out[Day == mod$global$tnow  & Compartment %in% c(\"S\", \"I\", \"R\") & Species == \"Human\", \"Count\" := as.vector(mod$human$SIR)]   det_out[Day == mod$global$tnow & Compartment %in% c(\"S\", \"I\", \"R\") & Species == \"Bird\", \"Count\" := as.vector(mod$bird$SIR)]   det_out[Day == mod$global$tnow & Compartment %in% c(\"M\", \"Y\", \"Z\") & Species == \"Mosquito\", \"Count\" := c(mod$mosquito$M, mod$mosquito$Y, mod$mosquito$Z)]   # tick   mod$global$tnow <- mod$global$tnow + 1L } sto_out <- mclapply(X = 1:10, FUN = function(runid) {   mod <- make_MicroMoB(tmax = tmax, p = patches)    setup_humans_SIR(mod, stochastic = TRUE, theta = theta, H = sum(SIR), SIR = SIR, gamma = gamma)   setup_birds_SIRS(mod, stochastic = TRUE, fledge_disperse = theta_B, theta = theta_B, SIR = SIR_B, mu = mu, gamma = gammaB, r = rB)   setup_fledge_trace(mod, stochastic = TRUE, trace = fledge_lambda)   setup_mosquito_RM(mod, stochastic = TRUE, f = f, q = q, eip = eip, p = p, psi = psi, M = M, Y = Y, Z = Z)   setup_aqua_trace(mod, stochastic = TRUE, lambda = lambda)      # output   out <- rbind(     data.table(Day = rep(1:tmax, times = 3), Count = NaN, Compartment = rep(c(\"S\", \"I\", \"R\"), each = tmax), Species = \"Human\"),     data.table(Day = rep(1:tmax, times = 3), Count = NaN, Compartment = rep(c(\"S\", \"I\", \"R\"), each = tmax), Species = \"Bird\"),     data.table(Day = rep(1:tmax, times = 3), Count = NaN, Compartment = rep(c(\"M\", \"Y\", \"Z\"), each = tmax), Species = \"Mosquito\")   )   setkeyv(out, c(\"Day\", \"Species\"))      # run it   while (mod$global$tnow <= tmax) {     # compute biting     MicroWNV::compute_bloodmeal(model = mod)     # update state     step_aqua(model = mod)     step_mosquitoes(model = mod)     step_fledge(model = mod)     step_birds(model = mod)     step_humans(model = mod)     # output     out[Day == mod$global$tnow  & Compartment %in% c(\"S\", \"I\", \"R\") & Species == \"Human\", \"Count\" := as.vector(mod$human$SIR)]     out[Day == mod$global$tnow & Compartment %in% c(\"S\", \"I\", \"R\") & Species == \"Bird\", \"Count\" := as.vector(mod$bird$SIR)]     out[Day == mod$global$tnow & Compartment %in% c(\"M\", \"Y\", \"Z\") & Species == \"Mosquito\", \"Count\" := c(mod$mosquito$M, mod$mosquito$Y, mod$mosquito$Z)]     # tick     mod$global$tnow <- mod$global$tnow + 1L   }      out[, \"Run\" := as.integer(runid)]   return(out) })  sto_out <- do.call(rbind, sto_out) ggplot(sto_out) +     geom_line(aes(x = Day, y = Count, color = Compartment, group = interaction(Run, Compartment)), alpha = 0.3) +     geom_line(data = det_out, aes(x = Day, y = Count, color = Compartment)) +     facet_wrap(. ~ Species, scales = \"free\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sean L. Wu. Author, maintainer. David L. Smith. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wu S, Smith D (2022). MicroWNV: Discrete time simulation West Nile virus. https://github.com/dd-harp/MicroWNV, https://dd-harp.github.io/MicroWNV/.","code":"@Manual{,   title = {MicroWNV: Discrete time simulation of West Nile virus},   author = {Sean L. Wu and David L. Smith},   year = {2022},   note = {https://github.com/dd-harp/MicroWNV, https://dd-harp.github.io/MicroWNV/}, }"},{"path":[]},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Discrete time simulation of West Nile virus","text":"Micro-WNV extension Micro-MoB West Nile virus (WNV) models. depends MicroMoB package installed first. follows design philosophy software package, true extension sense used independently, depends “core” algorithms common across mosquito-borne pathogen transmission simulations implemented MicroMoB. MicroWNV package adds two additional components, fledge fledgling (immature) bird populations, bird adult bird populations. certain cases S3 methods overridden take account peculiarities WNV models, can found source code (references) clearly marked.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Discrete time simulation of West Nile virus","text":"","code":"remotes::install_github('dd-harp/MicroWNV') library(MicroWNV)"},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Discrete time simulation of West Nile virus","text":"Thank interest Micro-MoB! bug report, please open issue GitHub. like open pull request questions, please see guide contributing project vignette(\"Contributing\").","code":""},{"path":"/reference/compute_B_pop.SIRS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute total SIRS bird population (\\(B_{pop}\\)) — compute_B_pop.SIRS","title":"Compute total SIRS bird population (\\(B_{pop}\\)) — compute_B_pop.SIRS","text":"Compute total SIRS bird population (\\(B_{pop}\\))","code":""},{"path":"/reference/compute_B_pop.SIRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute total SIRS bird population (\\(B_{pop}\\)) — compute_B_pop.SIRS","text":"","code":"# S3 method for SIRS compute_B_pop(model)"},{"path":"/reference/compute_B_pop.SIRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute total SIRS bird population (\\(B_{pop}\\)) — compute_B_pop.SIRS","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_B_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute total bird population (\\(B_{pop}\\)) — compute_B_pop","title":"Compute total bird population (\\(B_{pop}\\)) — compute_B_pop","text":"Compute total bird population place method dispatches type model$bird","code":""},{"path":"/reference/compute_B_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute total bird population (\\(B_{pop}\\)) — compute_B_pop","text":"","code":"compute_B_pop(model)"},{"path":"/reference/compute_B_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute total bird population (\\(B_{pop}\\)) — compute_B_pop","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_B_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute total bird population (\\(B_{pop}\\)) — compute_B_pop","text":"vector length p","code":""},{"path":"/reference/compute_PsiB.SIRS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute SIRS bird time at risk matrix (\\(\\Psi\\)) — compute_PsiB.SIRS","title":"Compute SIRS bird time at risk matrix (\\(\\Psi\\)) — compute_PsiB.SIRS","text":"Compute SIRS bird time risk matrix (\\(\\Psi\\))","code":""},{"path":"/reference/compute_PsiB.SIRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute SIRS bird time at risk matrix (\\(\\Psi\\)) — compute_PsiB.SIRS","text":"","code":"# S3 method for SIRS compute_PsiB(model)"},{"path":"/reference/compute_PsiB.SIRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute SIRS bird time at risk matrix (\\(\\Psi\\)) — compute_PsiB.SIRS","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_PsiB.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute time at risk matrix (\\(\\Psi\\)) — compute_PsiB","title":"Compute time at risk matrix (\\(\\Psi\\)) — compute_PsiB","text":"Compute home range (time risk) matrix bird populations. method dispatches type model$bird.","code":""},{"path":"/reference/compute_PsiB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute time at risk matrix (\\(\\Psi\\)) — compute_PsiB","text":"","code":"compute_PsiB(model)"},{"path":"/reference/compute_PsiB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute time at risk matrix (\\(\\Psi\\)) — compute_PsiB","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_PsiB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute time at risk matrix (\\(\\Psi\\)) — compute_PsiB","text":"matrix n rows p columns","code":""},{"path":"/reference/compute_WB.SIRS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available SIRS bird population (\\(W_{B}\\)) — compute_WB.SIRS","title":"Compute available SIRS bird population (\\(W_{B}\\)) — compute_WB.SIRS","text":"Compute available SIRS bird population (\\(W_{B}\\))","code":""},{"path":"/reference/compute_WB.SIRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available SIRS bird population (\\(W_{B}\\)) — compute_WB.SIRS","text":"","code":"# S3 method for SIRS compute_WB(model)"},{"path":"/reference/compute_WB.SIRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available SIRS bird population (\\(W_{B}\\)) — compute_WB.SIRS","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_WB.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute available birds (\\(W_{B}\\)) — compute_WB","title":"Compute available birds (\\(W_{B}\\)) — compute_WB","text":"Compute bird population place weighted home range biting weight. method dispatches type model$bird.","code":""},{"path":"/reference/compute_WB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute available birds (\\(W_{B}\\)) — compute_WB","text":"","code":"compute_WB(model)"},{"path":"/reference/compute_WB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute available birds (\\(W_{B}\\)) — compute_WB","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_WB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute available birds (\\(W_{B}\\)) — compute_WB","text":"vector length p","code":""},{"path":"/reference/compute_bloodmeal.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute bloodmeals taken by mosquitoes on hosts — compute_bloodmeal","title":"Compute bloodmeals taken by mosquitoes on hosts — compute_bloodmeal","text":"run prior step functions update components time step. computes various quantities related disease transmission species using generic interfaces (methods) provided component. updates h, vectors giving per-capita force infection bird human components, kappa, net infectiousness hosts mosquito component.","code":""},{"path":"/reference/compute_bloodmeal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute bloodmeals taken by mosquitoes on hosts — compute_bloodmeal","text":"","code":"compute_bloodmeal(model)"},{"path":"/reference/compute_bloodmeal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute bloodmeals taken by mosquitoes on hosts — compute_bloodmeal","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_clutch.SIRS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute SIRS egg clutches — compute_clutch.SIRS","title":"Compute SIRS egg clutches — compute_clutch.SIRS","text":"Compute SIRS egg clutches","code":""},{"path":"/reference/compute_clutch.SIRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute SIRS egg clutches — compute_clutch.SIRS","text":"","code":"# S3 method for SIRS compute_clutch(model)"},{"path":"/reference/compute_clutch.SIRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute SIRS egg clutches — compute_clutch.SIRS","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_clutch.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of eggs laid from birds for each patch — compute_clutch","title":"Compute number of eggs laid from birds for each patch — compute_clutch","text":"method dispatches type model$bird","code":""},{"path":"/reference/compute_clutch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of eggs laid from birds for each patch — compute_clutch","text":"","code":"compute_clutch(model)"},{"path":"/reference/compute_clutch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of eggs laid from birds for each patch — compute_clutch","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_clutch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute number of eggs laid from birds for each patch — compute_clutch","text":"vector length p giving total number eggs laid adult birds patch","code":""},{"path":"/reference/compute_fledge.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of new fledglings — compute_fledge","title":"Compute number of new fledglings — compute_fledge","text":"method dispatches type model$fledge","code":""},{"path":"/reference/compute_fledge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of new fledglings — compute_fledge","text":"","code":"compute_fledge(model)"},{"path":"/reference/compute_fledge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of new fledglings — compute_fledge","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_fledge.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of new fledglings from trace — compute_fledge.trace","title":"Compute number of new fledglings from trace — compute_fledge.trace","text":"Compute number new fledglings trace","code":""},{"path":"/reference/compute_fledge.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of new fledglings from trace — compute_fledge.trace","text":"","code":"# S3 method for trace compute_fledge(model)"},{"path":"/reference/compute_fledge.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of new fledglings from trace — compute_fledge.trace","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_fledge.trace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute number of new fledglings from trace — compute_fledge.trace","text":"see compute_fledge.trace_deterministic compute_fledge.trace_stochastic","code":""},{"path":"/reference/compute_fledge.trace_deterministic.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of new fledglings from trace (deterministic) — compute_fledge.trace_deterministic","title":"Compute number of new fledglings from trace (deterministic) — compute_fledge.trace_deterministic","text":"Return column trace matrix day.","code":""},{"path":"/reference/compute_fledge.trace_deterministic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of new fledglings from trace (deterministic) — compute_fledge.trace_deterministic","text":"","code":"# S3 method for trace_deterministic compute_fledge(model)"},{"path":"/reference/compute_fledge.trace_deterministic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of new fledglings from trace (deterministic) — compute_fledge.trace_deterministic","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_fledge.trace_stochastic.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of new fledglings from trace (stochastic) — compute_fledge.trace_stochastic","title":"Compute number of new fledglings from trace (stochastic) — compute_fledge.trace_stochastic","text":"Draw Poisson distributed number fledglings mean parameter column trace matrix day.","code":""},{"path":"/reference/compute_fledge.trace_stochastic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of new fledglings from trace (stochastic) — compute_fledge.trace_stochastic","text":"","code":"# S3 method for trace_stochastic compute_fledge(model)"},{"path":"/reference/compute_fledge.trace_stochastic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of new fledglings from trace (stochastic) — compute_fledge.trace_stochastic","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_q.RM.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human blood feeding fraction for RM model (\\(q\\)) — compute_q.RM","title":"Compute human blood feeding fraction for RM model (\\(q\\)) — compute_q.RM","text":"method simply returns q parameter mosquito object, RM model assumes constant fraction blood meals taken human hosts.","code":""},{"path":"/reference/compute_q.RM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human blood feeding fraction for RM model (\\(q\\)) — compute_q.RM","text":"","code":"# S3 method for RM compute_q(model, W, WB)"},{"path":"/reference/compute_q.RM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human blood feeding fraction for RM model (\\(q\\)) — compute_q.RM","text":"model object MicroMoB::make_MicroMoB W vector length p giving human availability patch (\\(W\\)) WB vector length p giving bird availability patch (\\(W_{B}\\))","code":""},{"path":"/reference/compute_q.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute human blood feeding fraction (\\(q\\)) — compute_q","title":"Compute human blood feeding fraction (\\(q\\)) — compute_q","text":"function redefined MicroMoB computation \\(q\\) may differ modeling birds.","code":""},{"path":"/reference/compute_q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute human blood feeding fraction (\\(q\\)) — compute_q","text":"","code":"compute_q(model, W, WB)"},{"path":"/reference/compute_q.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute human blood feeding fraction (\\(q\\)) — compute_q","text":"model object MicroMoB::make_MicroMoB W vector length p giving human availability patch (\\(W\\)) WB vector length p giving bird availability patch (\\(W_{B}\\))","code":""},{"path":"/reference/compute_wfB.SIRS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute bird biting weights of SIRS birds (\\(w_{f_{B}}\\)) — compute_wfB.SIRS","title":"Compute bird biting weights of SIRS birds (\\(w_{f_{B}}\\)) — compute_wfB.SIRS","text":"Compute bird biting weights SIRS birds (\\(w_{f_{B}}\\))","code":""},{"path":"/reference/compute_wfB.SIRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute bird biting weights of SIRS birds (\\(w_{f_{B}}\\)) — compute_wfB.SIRS","text":"","code":"# S3 method for SIRS compute_wfB(model)"},{"path":"/reference/compute_wfB.SIRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute bird biting weights of SIRS birds (\\(w_{f_{B}}\\)) — compute_wfB.SIRS","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_wfB.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute bird biting weights (\\(w_{f_{B}}\\)) — compute_wfB","title":"Compute bird biting weights (\\(w_{f_{B}}\\)) — compute_wfB","text":"method dispatches type model$bird.","code":""},{"path":"/reference/compute_wfB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute bird biting weights (\\(w_{f_{B}}\\)) — compute_wfB","text":"","code":"compute_wfB(model)"},{"path":"/reference/compute_wfB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute bird biting weights (\\(w_{f_{B}}\\)) — compute_wfB","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_wfB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute bird biting weights (\\(w_{f_{B}}\\)) — compute_wfB","text":"vector length p","code":""},{"path":"/reference/compute_xB.SIRS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute net infectiousness of SIRS birds (\\(x_{B}\\)) — compute_xB.SIRS","title":"Compute net infectiousness of SIRS birds (\\(x_{B}\\)) — compute_xB.SIRS","text":"Compute net infectiousness SIRS birds (\\(x_{B}\\))","code":""},{"path":"/reference/compute_xB.SIRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute net infectiousness of SIRS birds (\\(x_{B}\\)) — compute_xB.SIRS","text":"","code":"# S3 method for SIRS compute_xB(model)"},{"path":"/reference/compute_xB.SIRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute net infectiousness of SIRS birds (\\(x_{B}\\)) — compute_xB.SIRS","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_xB.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute net infectiousness of birds (\\(x_{B}\\)) — compute_xB","title":"Compute net infectiousness of birds (\\(x_{B}\\)) — compute_xB","text":"normally computed prevalence disease place multiplied transmission efficiency birds mosquitoes. method dispatches type model$bird","code":""},{"path":"/reference/compute_xB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute net infectiousness of birds (\\(x_{B}\\)) — compute_xB","text":"","code":"compute_xB(model)"},{"path":"/reference/compute_xB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute net infectiousness of birds (\\(x_{B}\\)) — compute_xB","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/compute_xB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute net infectiousness of birds (\\(x_{B}\\)) — compute_xB","text":"vector length p","code":""},{"path":"/reference/setup_birds_SIRS.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup birds with SIRS infection model — setup_birds_SIRS","title":"Setup birds with SIRS infection model — setup_birds_SIRS","text":"model interfaces bloodmeals via vector model$bird$h, giving per-capita force infection birds patch.","code":""},{"path":"/reference/setup_birds_SIRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup birds with SIRS infection model — setup_birds_SIRS","text":"","code":"setup_birds_SIRS(   model,   stochastic,   fledge_disperse,   theta,   SIR,   mu,   wf = NULL,   b = 0.55,   c = 0.15,   gamma = 1/5,   r = 1/120,   beta = 0.5 )"},{"path":"/reference/setup_birds_SIRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup birds with SIRS infection model — setup_birds_SIRS","text":"model object MicroMoB::make_MicroMoB stochastic model update deterministically stochastically? fledge_disperse dispersal matrix fledglings; parameter part adult model rather fledgling model handoff responsibility two occurs moment fledgling leaves nest, exactly point decide disperse new adult. theta matrix giving time spent bird's home range SIR matrix initial states patch mu either scalar, vector length tmax, vector length 365 giving daily mortality rates wf biting weights, vector length p NULL use 1 places/patches. b transmission efficiency (mosquitoes birds) c transmission efficiency (birds mosquitoes) gamma inverse infectious duration (recovery rate) r inverse immune duration (rate loss immunity) beta number eggs produced, per adult, per day","code":""},{"path":"/reference/setup_fledge_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup fledglings with trace (forced) births — setup_fledge_trace","title":"Setup fledglings with trace (forced) births — setup_fledge_trace","text":"requires birds set prior called.","code":""},{"path":"/reference/setup_fledge_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup fledglings with trace (forced) births — setup_fledge_trace","text":"","code":"setup_fledge_trace(model, trace, stochastic)"},{"path":"/reference/setup_fledge_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup fledglings with trace (forced) births — setup_fledge_trace","text":"model object MicroMoB::make_MicroMoB trace either vector length equal p, matrix p rows tmax columns, matrix p rows 365 columns stochastic model update deterministically stochastically?","code":""},{"path":"/reference/step_birds.SIRS.html","id":null,"dir":"Reference","previous_headings":"","what":"Update SIRS bird population — step_birds.SIRS","title":"Update SIRS bird population — step_birds.SIRS","text":"function dispatches second argument model$bird stochastic deterministic behavior.","code":""},{"path":"/reference/step_birds.SIRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update SIRS bird population — step_birds.SIRS","text":"","code":"# S3 method for SIRS step_birds(model)"},{"path":"/reference/step_birds.SIRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update SIRS bird population — step_birds.SIRS","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/step_birds.SIRS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update SIRS bird population — step_birds.SIRS","text":"see step_birds.SIRS_deterministic step_birds.SIRS_stochastic","code":""},{"path":"/reference/step_birds.SIRS_deterministic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update SIRS bird population (deterministic) — step_birds.SIRS_deterministic","title":"Update SIRS bird population (deterministic) — step_birds.SIRS_deterministic","text":"Update SIRS bird population (deterministic)","code":""},{"path":"/reference/step_birds.SIRS_deterministic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update SIRS bird population (deterministic) — step_birds.SIRS_deterministic","text":"","code":"# S3 method for SIRS_deterministic step_birds(model)"},{"path":"/reference/step_birds.SIRS_deterministic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update SIRS bird population (deterministic) — step_birds.SIRS_deterministic","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/step_birds.SIRS_stochastic.html","id":null,"dir":"Reference","previous_headings":"","what":"Update SIRS bird population (stochastic) — step_birds.SIRS_stochastic","title":"Update SIRS bird population (stochastic) — step_birds.SIRS_stochastic","text":"Update SIRS bird population (stochastic)","code":""},{"path":"/reference/step_birds.SIRS_stochastic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update SIRS bird population (stochastic) — step_birds.SIRS_stochastic","text":"","code":"# S3 method for SIRS_stochastic step_birds(model)"},{"path":"/reference/step_birds.SIRS_stochastic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update SIRS bird population (stochastic) — step_birds.SIRS_stochastic","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/step_birds.html","id":null,"dir":"Reference","previous_headings":"","what":"Update bird population — step_birds","title":"Update bird population — step_birds","text":"method dispatches type model$bird.","code":""},{"path":"/reference/step_birds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update bird population — step_birds","text":"","code":"step_birds(model)"},{"path":"/reference/step_birds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update bird population — step_birds","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/step_fledge.html","id":null,"dir":"Reference","previous_headings":"","what":"Update fledgling populations — step_fledge","title":"Update fledgling populations — step_fledge","text":"method dispatches type model$fledge","code":""},{"path":"/reference/step_fledge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update fledgling populations — step_fledge","text":"","code":"step_fledge(model)"},{"path":"/reference/step_fledge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update fledgling populations — step_fledge","text":"model object MicroMoB::make_MicroMoB","code":""},{"path":"/reference/step_fledge.trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Update fledgling populations for forced births — step_fledge.trace","title":"Update fledgling populations for forced births — step_fledge.trace","text":"function nothing trace models endogenous dynamics.","code":""},{"path":"/reference/step_fledge.trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update fledgling populations for forced births — step_fledge.trace","text":"","code":"# S3 method for trace step_fledge(model)"},{"path":"/reference/step_fledge.trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update fledgling populations for forced births — step_fledge.trace","text":"model object MicroMoB::make_MicroMoB","code":""}]
